<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OpenFile" xml:space="preserve">
    <value>Відкрити файл</value>
    <comment/>
  </data>
  <data name="SaveFileAs" xml:space="preserve">
    <value>Зберегти файл як</value>
    <comment/>
  </data>
  <data name="UnexpectedToken" xml:space="preserve">
    <value>Неочікуваний токен: {Token}</value>
    <comment/>
  </data>
  <data name="UnknownPrefixFunction" xml:space="preserve">
    <value>Невідома префіксна функція: {FunctionName}</value>
    <comment/>
  </data>
  <data name="UnknownInfixFunction" xml:space="preserve">
    <value>Невідомий оператор або інфіксна функція: {FunctionName}</value>
    <comment/>
  </data>
  <data name="UnexpectedEOE" xml:space="preserve">
    <value>Неочікуваний кінець виразу</value>
    <comment/>
  </data>
  <data name="UnexpectedValue" xml:space="preserve">
    <value>Очікувалося {Type}{ExpectedValue}, знайдено {RealValue}</value>
    <comment/>
  </data>
  <data name="UnexpectedTokenEOE" xml:space="preserve">
    <value>Неочікуваний токен у кінці виразу: {Token}</value>
    <comment/>
  </data>
  <data name="UnexpectedCharacter" xml:space="preserve">
    <value>Неочікуваний символ {Character} на позиції {Position}</value>
    <comment/>
  </data>
  <data name="CannotDivideBy0" xml:space="preserve">
    <value>Не можна ділити на 0</value>
    <comment/>
  </data>
  <data name="ExpectsExactlyNArguments" xml:space="preserve">
    <value>Функція {FunctionName} очікує рівно {Count} аргументів</value>
    <comment/>
  </data>
  <data name="ExpectsAtLeastNNumberArguments" xml:space="preserve">
    <value>Функція {FunctionName} очікує хоча б {Count} числових аргументів</value>
    <comment/>
  </data>
  <data name="CannotConvertTo" xml:space="preserve">
    <value>Не можна конвертувати {FromType} у {ToType} </value>
    <comment/>
  </data>
  <data name="OperatorDefinedOnlyForNumbers" xml:space="preserve">
    <value>Оператор {Operator} визначений лише для чисел</value>
    <comment/>
  </data>
  <data name="UnaryOperatorDefinedOnlyForNumbers" xml:space="preserve">
    <value>Оператор унарний {Operator} визначений лише для чисел</value>
    <comment/>
  </data>
  <data name="OK" xml:space="preserve">
    <value>Добре</value>
    <comment/>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Помилка</value>
    <comment/>
  </data>
  <data name="SavingResult" xml:space="preserve">
    <value>Результат збереження</value>
    <comment/>
  </data>
  <data name="EmptyFile" xml:space="preserve">
    <value>Файл пустий</value>
    <comment/>
  </data>
  <data name="InvalidFileHeader" xml:space="preserve">
    <value>Заголовок файлу невалідний</value>
    <comment/>
  </data>
  <data name="FileSavedSuccessfully" xml:space="preserve">
    <value>Файл успішно збережено у локації {Path}</value>
    <comment/>
  </data>
  <data name="FileSavingError" xml:space="preserve">
    <value>Файл не вдалося зберегти. Помилка: {Error}</value>
    <comment/>
  </data>
  <data name="EnterValidNumbers" xml:space="preserve">
    <value>Будь ласка, введіть валідні числа</value>
    <comment/>
  </data>
  <data name="DimensionsMustBeGreaterThan0" xml:space="preserve">
    <value>Розміри таблиці повинні бути більші за 0</value>
    <comment/>
  </data>
  <data name="CreatingGrid" xml:space="preserve">
    <value>Створюється таблиця {Columns}x{Rows}...</value>
    <comment/>
  </data>
  <data name="GridCreated" xml:space="preserve">
    <value>Таблицю {Columns}x{Rows} створено за {TimeMs}мс</value>
    <comment/>
  </data>
</root>